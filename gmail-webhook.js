const Imap = require('imap');
const { simpleParser } = require('mailparser');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Zabezpeƒçenie - ignorovanie SSL/TLS probl√©mov
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; // Toto umo≈æn√≠ pripojenie k serverom so self-signed certifik√°tmi

// Supabase klient
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

// Gmail IMAP pripojenie
const imap = new Imap({
  user: process.env.GMAIL_USER, // Your Gmail email address
  password: process.env.GMAIL_APP_PASSWORD, // App Password here, NOT your regular Gmail password
  host: 'imap.gmail.com',
  port: 993,
  tls: true
});

function openInbox(cb) {
  imap.openBox('INBOX', false, cb);
}

imap.once('ready', function () {
  openInbox((err, box) => {
    if (err) throw err;
    console.log(`üì© Monitoring Gmail for new emails...`);

    imap.on('mail', () => {
      const fetch = imap.seq.fetch(`${box.messages.total}:*`, { bodies: '' });
      fetch.on('message', (msg) => {
        msg.on('body', (stream) => {
          simpleParser(stream, async (err, parsed) => {
            if (err) throw err;

            // Extrahovanie √∫dajov z e-mailu
            const emailData = {
              subject: parsed.subject || 'Nezn√°my predmet',
              from: parsed.from.text || 'Nezn√°my odosielateƒæ',
              text: parsed.text || '',
              html: parsed.html || ''
            };

            console.log("üì• Prijat√Ω email:", emailData);

            // ‚úÖ Handler na spracovanie objedn√°vky
            const parsedOrder = processOrderEmail(emailData);

            if (parsedOrder) {
              console.log("‚úÖ Platn√° objedn√°vka, uklad√°m do Supabase:", parsedOrder);
              
              const { data, error } = await supabase.from('orders').insert([parsedOrder]);
              
              if (error) {
                console.error("‚ùå Chyba pri ukladan√≠ do Supabase:", error);
              } else {
                console.log("‚úÖ Objedn√°vka ulo≈æen√° do Supabase:", data);
              }
            } else {
              console.log("‚ùå E-mail nie je objedn√°vka, ignorujem.");
            }
          });
        });
      });
    });
  });
});

imap.once('error', (err) => {
  console.log('‚ùå Chyba IMAP:', err);
});

imap.once('end', () => {
  console.log('üì§ IMAP spojenie zatvoren√©');
});

imap.connect();

/**
 * Handler na spracovanie e-mailov z Shoptetu
 * @param {Object} emailData - D√°ta z e-mailu
 * @returns {Object|null} - Spracovan√° objedn√°vka alebo null
 */
function processOrderEmail(emailData) {
  if (!emailData.subject.includes("Objedn√°vka")) {
    return null; // ‚ùå Ak e-mail nie je objedn√°vka, ignorujeme ho
  }

  // üì¶ Extrahovanie √∫dajov
  const orderIdMatch = emailData.text.match(/K√≥d objedn√°vky:\s?(\d+)/);
  const productMatch = emailData.text.match(/(Sneaker Shields)/);
  const sizeMatch = emailData.text.match(/Veƒækos≈• tenisky:\s?([\d-]+)/);
  const priceMatch = emailData.text.match(/Cena za m.1:\s?([\d,]+) ‚Ç¨/);

  if (!orderIdMatch || !productMatch || !sizeMatch || !priceMatch) {
    return null; // ‚ùå Ak sa nepodarilo extrahova≈• √∫daje, ignorujeme e-mail
  }

  return {
    order_id: orderIdMatch[1].trim(),
    product_name: productMatch[1].trim(),
    size: sizeMatch[1].trim(),
    price: parseFloat(priceMatch[1].replace(',', '.').trim()),
    email_subject: emailData.subject,
    email_from: emailData.from,
    created_at: new Date().toISOString()  // Timestamp pre Supabase
  };
}

